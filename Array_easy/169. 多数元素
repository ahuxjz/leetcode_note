给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。

你可以假设数组是非空的，并且给定的数组总是存在多数元素。

 

示例 1:

输入: [3,2,3]
输出: 3
示例 2:

输入: [2,2,1,1,1,2,2]
输出: 2

//Java 原始方法------利用hashmap中的键值对进行计数
class Solution {
    public int majorityElement(int[] nums) {
            HashMap<Integer,Integer> hm = new HashMap<Integer,Integer>();
            for(int i=0;i<nums.length;i++){
               if(hm.containsKey(nums[i])){
                   hm.put(nums[i],hm.get(nums[i])+1);
               }else{
                   hm.put(nums[i],1);
               }
            }
            Map.Entry<Integer, Integer> mEntry = null;
            for (Map.Entry<Integer, Integer> entry : hm.entrySet()) {
		    if(mEntry==null || entry.getValue()>mEntry.getValue()){
                mEntry=entry;
            }
		}
        return mEntry.getKey();
    }
}


//Java 排序法------思路：因为其长度 > [n/2],所以排序过后数组中，相同元素总是相邻的，则一定存在下标为[n/2]的元素是众数。
class Solution{
  public int magjorityElement(int[] nums){
   Arrays.sory(nums);
   return nums[nums.lenth/2];
  }
}


//Java 摩尔投票法------投票法为遇到相同的则票数+1，遇到不同的则票数-1..
       方法可行性分析：多数元素的个数 > [n/2],其余元素个数<=[n/2]，因此可知 多数元素个数-其余元素个数>=1
 class Solution{
     public int majorityElement(int[] nums){
     int cand_num=nums[0],count=1;
     for(int i=1;i<nums.length;i++){
       if(cand_num==nums[i]){
          ++count;
       }else if(--count==0){
       cand_num =nums[i];
       count=1;
       }
     }
     return cand_num;
     }
 }
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/majority-element
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
