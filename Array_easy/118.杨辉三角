
给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。

输入: 5
输出:
[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]


java:

class Solution {
    public List<List<Integer>> generate(int numRows) {
          List<List<Integer>> triangle = new ArrayList<List<Integer>>();
          //如果只有0行，直接返回triangle
          if(numRows==0){
              return triangle;
          }
          //创建第一行的元素，始终为1
          triangle.add(new ArrayList<>());
          triangle.get(0).add(1);
          //遍历循环每行
          for(int rowNum=1;rowNum<numRows;rowNum++){
              //创建该行
              List<Integer> row = new ArrayList<>();
              //创建该行的前一行
              List<Integer> prevRow = triangle.get(rowNum-1);
              //初始化每一行第一个元素为1
              row.add(1);
              //因为第几行就有几个元素，每一行第一个元素已经添加为1，所以从j=1开始遍历rowNum行个元素
              for(int j=1;j<rowNum;j++){
                  //改行添加的元素为前一行前一个元素+当前元素
                  row.add(prevRow.get(j-1)+prevRow.get(j));
              }
              //结束后在元素末尾加上始终为1的元素
              row.add(1);
              //将row加入到triangle
              triangle.add(row);
          }
          //返回triangle
          return triangle;
    }
}


#方法2 递归
/*
作者：jeromememory
链接：https://leetcode-cn.com/problems/pascals-triangle/solution/javadi-gui-dong-tai-gui-hua-by-jeromememory/
来源：力扣（LeetCode）  
*/
递归需要关注三个条件 ： 1.找整个递归的终止条件
                       2.找返回值
                       3.本级递归应该做什么
class Solution {
    public List<List<Integer>> generate(int numRows) {
    		//存储要返回的杨辉三角
        List<List<Integer>> dg = new ArrayList<>();
        //若0行，则返回空
        if(numRows == 0){
            return dg;
        }
        //递归出口，这是第一步！找到出口
        if(numRows == 1){
            dg.add(new ArrayList<>());
            dg.get(0).add(1);
            return dg;
        }
        //递归，注意返回值！！！这是第二步
        dg = generate(numRows-1);
        //一级递归要做啥，我们可以看第二行到第三行需要做啥
        //首先是要申请一个list来存储第三行，然后通过第二行得到第三行
        //第三行的首尾为1是确定了的，然后就是中间的数如何得到
        //通过观察很容易拿到for循环里面的式子
        //最后别忘了返回值！！！
        List<Integer> row = new ArrayList<>();
        row.add(1);
        for(int j = 1;j < numRows - 1;j++){
            row.add(dg.get(numRows-2).get(j-1) + dg.get(numRows-2).get(j));
        }
        row.add(1);
        dg.add(row);
        return dg;
    }
}

                 




